## Descriptives
Let's get some descriptives for ambiguous and control trials
```{r}
resAll$egoChoice = as.numeric(as.matrix(resAll$egoChoice)) #if egoChoice has been converted to factor for LMERs
# Ambiguous/critical trials (excluding offset, to simplify)
pander(aggregate(egoChoice~config+axis,data=resAll,FUN=mean))
pander(aggregate(RTDV~config+perspectivePreference+axis,data=resAll,FUN=mean))
#pander(aggregate(xFlipDV~config+perspectivePreference+axis,data=resAll,FUN=mean))
#pander(aggregate(divergDist~config+perspectivePreference+axis,data=resAll,FUN=mean))
#some info about optimal distance
#summary(lm(optimalDist~egoChosen*config,data=resAll))
#pander(aggregate(optimalDist~config+egoChosen,data=resAll,FUN=mean))
#Consider the errors made by axis by responder
#pander(aggregate(egoChoice~axis+fl+perspectivePreference,data=resAll,FUN=mean))
#This is to investigate what mixed responders are doing across trials in the two exps.
#resAllmixed = resAll[resAll$perspectivePreference == 'mixed',]
#options(max.print=999999)
#aggregate(egoChoice~trial+fl,data=resAllmixed,FUN=mean)
#resAllError$err = as.numeric(as.matrix(resAllError$err)) #if err has been converted to factor for LMERs
pander(aggregate(err~perspectivePreference+offset+axis+config,data=resAllError,FUN=mean))
pander(aggregate(RTDV~perspectivePreference+axis+config,data=resAllError,FUN=mean))
#pander(aggregate(xFlipDV~perspectivePreference+axis+config,data=resAllError,FUN=mean))
#pander(aggregate(divergDist~perspectivePreference+axis+config,data=resAllError,FUN=mean))
```
## Linear mixed effects models for ambiguous (critical) trials
We create separate linear mixed effects models for each of the dependent variables (proportion of egocentric choices, RT, total divergence from optimal distance, x-flips) on ambiguous/critical trials.
We start with some pre-processing of the variables, setting the reference categories where relevant, and inspecting the data structure.
```{r}
resAll = as.data.frame(as.matrix(resAll))
#Defining as factors in order to set reference categories next
resAll$config = as.factor(as.matrix(resAll$config))
resAll$offset = as.factor(as.matrix(resAll$offset))
resAll$axis = as.factor(as.matrix(resAll$axis))
resAll$perspectivePreference = as.factor(as.matrix(resAll$perspectivePreference))
resAll$trial = as.integer(as.matrix(resAll$trial))
##Check for any "holes" in the design
with(resAll, table(config, offset, axis, perspectivePreference))
#when offset is 180, configurations cannot be ego-aligned or other-aligned, maybe remove offset as factor?
#with(resAll, table(config, axis, perspectivePreference))
#Make sure DVs are of the right type
resAll$RTDV = as.numeric(as.matrix(resAll$RTDV))
resAll$divergDist = as.numeric(as.matrix(resAll$divergDist))
resAll$xFlipDV = as.integer(as.matrix(resAll$xFlipDV))
resAll$egoChoice = as.factor(as.matrix(resAll$egoChoice))
#str(resAll)
```
## Step 1:
Let's set up the contrast structure for each factor of interest (axis, preference, offset)
```{r}
resAll.cont <- within(resAll, {
# Factor 1: instruction orientation
axis.latVsag <- ifelse( axis=="lateral", 1/2,
ifelse( axis=="sagittal", -1/2, NA ) )
# Factor 2: Perspective preference
PP.othVego <- ifelse( perspectivePreference=="other", 1/2,
ifelse( perspectivePreference=="mixed", 0,
ifelse( perspectivePreference=="ego", -1/2, NA )))
PP.mixVego <- ifelse( perspectivePreference=="other", 0,
ifelse( perspectivePreference=="mixed", 1/2,
ifelse( perspectivePreference=="ego", -1/2, NA )))
# Factor 3: Configuation of folders
config.neiVego <- ifelse( config=="neither", 1/2,
ifelse( config=="partner", 0,
ifelse( config=="ego", -1/2, NA )))
config.parVego <- ifelse( config=="neither", 0,
ifelse( config=="partner", 1/2,
ifelse( config=="ego", -1/2, NA )))
} )
```
##Step 2:
Let's build the omnibus model for each DV with all effects of interest for research questions
```{r}
## Response time ##
RTModel.omni <- lmer( log(RTDV) ~ (1 | fl) + (0 + (config.neiVego + config.parVego) | fl) + (0 + axis.latVsag | fl) +
# perspectivePreference*config*axis
axis.latVsag * (PP.othVego + PP.mixVego) * (config.neiVego + config.parVego),
data=resAll.cont, REML=FALSE )
summary(RTModel.omni)
## Divergence from Optimal Distance ##
DistanceModel.omni <- lmer( log(divergDist) ~ (1 | fl) + (0 + (config.neiVego + config.parVego) | fl) + (0 + axis.latVsag | fl) +
# perspectivePreference*config*axis
axis.latVsag * (PP.othVego + PP.mixVego) * (config.neiVego + config.parVego),
data=resAll.cont, REML=FALSE )
summary(DistanceModel.omni)
#print('Distance:'); pander(print_stats(DistanceModel.omni))
## Directional shifts ##
xFlip.omni <- lmer( xFlipDV ~ axis.latVsag * (PP.othVego + PP.mixVego) * (config.neiVego + config.parVego)
+ (1 | fl),
#+ (0 + (config.neiVego + config.parVego) | fl)
#+ (0 + axis.latVsag | fl),
data=resAll.cont,
#family = "poisson",
REML=FALSE )
summary(xFlip.omni)
#print('Directional Shifts:'); pander(print_stats(xFlip.omni))
## Proportion of Egocentric responses ##
EgoChoiceModel.omni = glmer(egoChoice ~ (config.neiVego + config.parVego) * axis.latVsag
+ (1 | fl)
#+ (0 + (config.neiVego + config.parVego) | fl) #did not converge
+ (0 + axis.latVsag | fl),
data=resAll.cont,
family = "binomial",
method = "Laplace",
nAGQ = 1,
REML = FALSE)
summary(EgoChoiceModel.omni)
```
##Step 3:
Get the effect sizes of omnibus based on the MuMIn package - designed for mixed effects models
```{r}
##// Effect Size
r.squaredGLMM(RTModel.omni)[1]
r.squaredGLMM(RTModel.omni)[2] #we report this
r.squaredGLMM(DistanceModel.omni)[1]
r.squaredGLMM(DistanceModel.omni)[2] #we report this
r.squaredGLMM(xFlip.omni)[1]
r.squaredGLMM(xFlip.omni)[2]
r.squaredGLMM(EgoChoiceModel.omni)[1]
r.squaredGLMM(EgoChoiceModel.omni)[2]
```
##STEP 4a:
In order to interpret the individual coefficients of the 2-way and 3-way interactions, need to first establish that the overall interactions are statistically significant
Note: Testing the 2-way interaction between perspectivePreference and config
```{r}
#This function cleans up the output of the likelihood-ratio tests
modComp = function(model1,model2,modname){
llcomp = anova(model1,model2)
df1 = llcomp$"Chi Df"[2]
chi1 = llcomp$"Chisq"[2]
pr1 = llcomp$"Pr(>Chisq)"[2]
test1 = data.frame(c(df1,chi1,pr1))
colnames(test1) = modname
rownames(test1) = c("df","chi","p")
return(test1)
}
## Note: what this does below is remove the critical 2-way interaction coefficients from the omnibus and then compares to the omni with likelihood ratio test
## what are the effects associated with the interaction between perspectivePreference and config?
# PP.othVego:config.neiVego
# PP.othVego:config.parVego
# PP.mixVego:config.neiVego
# PP.mixVego:config.parVego
twoway.RTModel.PPvsConfig = update(RTModel.omni,.~.-PP.othVego:config.neiVego-PP.othVego:config.parVego-PP.mixVego:config.neiVego-PP.mixVego:config.parVego)
modComp(RTModel.omni,twoway.RTModel.PPvsConfig,"twoway.RTModel.PPvsConfig")
twoway.DistanceModel.PPvsConfig = update(DistanceModel.omni,.~.-PP.othVego:config.neiVego-PP.othVego:config.parVego-PP.mixVego:config.neiVego-PP.mixVego:config.parVego)
modComp(DistanceModel.omni,twoway.DistanceModel.PPvsConfig,"twoway.DistanceModel.PPvsConfig")
twoway.xFlipModel.PPvsConfig = update(xFlip.omni,.~.-PP.othVego:config.neiVego-PP.othVego:config.parVego-PP.mixVego:config.neiVego-PP.mixVego:config.parVego)
modComp(xFlip.omni,twoway.xFlipModel.PPvsConfig,"twoway.xFlipModel.PPvsConfig")
```
##STEP 4b:
In order to interpret the individual coefficients of the 2-way and 3-way interactions, need to first establish that the overall interactions are statisticall significant
Note: Testing the 2-way interaction between perspectivePreference and axis
```{r}
## what are the effects associated with the interaction between perspectivePreference and axis?
# axis.latVsag:PP.othVego
# axis.latVsag:PP.mixVego
twoway.RTModel.PPvsAxis = update(RTModel.omni,.~.-axis.latVsag:PP.othVego-axis.latVsag:PP.mixVego)
modComp(RTModel.omni,twoway.RTModel.PPvsAxis,"twoway.RTModel.PPvsAxis")
twoway.DistanceModel.PPvsAxis = update(DistanceModel.omni,.~.-axis.latVsag:PP.othVego-axis.latVsag:PP.mixVego)
modComp(DistanceModel.omni,twoway.DistanceModel.PPvsAxis,"twoway.DistanceModel.PPvsAxis")
twoway.xFlip.PPvsAxis = update(xFlip.omni,.~.-axis.latVsag:PP.othVego-axis.latVsag:PP.mixVego)
modComp(xFlip.omni,twoway.xFlip.PPvsAxis,"twoway.xFlipModel.PPvsAxis")
```
##STEP 4c:
Examining what are the effects associated with the interaction between config and axis?
axis.latVsag:config.neiVego
axis.latVsag:config.parVego
```{r}
twoway.RTModel.ConfigvsAxis = update(RTModel.omni,.~.-axis.latVsag:config.neiVego-axis.latVsag:config.parVego)
modComp(RTModel.omni,twoway.RTModel.ConfigvsAxis,"twoway.RTModel.ConfigvsAxis")
twoway.DistanceModel.ConfigvsAxis = update(DistanceModel.omni,.~.-axis.latVsag:config.neiVego-axis.latVsag:config.parVego)
modComp(DistanceModel.omni,twoway.DistanceModel.ConfigvsAxis,"twoway.DistanceModel.ConfigvsAxis")
twoway.xFlip.ConfigvsAxis = update(xFlip.omni,.~.-axis.latVsag:config.neiVego-axis.latVsag:config.parVego)
modComp(xFlip.omni,twoway.xFlip.ConfigvsAxis,"twoway.xFlipModel.ConfigvsAxis")
```
##STEP 4d:
In order to interpret the individual coefficients of the 2-way and 3-way interactions, need to first establish that the overall interactions are statisticall significant
Testing the 3-way interaction between perspectivePreference, config, and axis
```{r}
threeway.RTModel = update(RTModel.omni,.~.-axis.latVsag:PP.othVego:config.neiVego-axis.latVsag:PP.othVego:config.parVego-axis.latVsag:PP.mixVego:config.neiVego-axis.latVsag:PP.mixVego:config.parVego)
modComp(RTModel.omni,threeway.RTModel,"threeway.RTModel")
threeway.DistanceModel = update(DistanceModel.omni,.~.-axis.latVsag:PP.othVego:config.neiVego-axis.latVsag:PP.othVego:config.parVego-axis.latVsag:PP.mixVego:config.neiVego-axis.latVsag:PP.mixVego:config.parVego)
modComp(DistanceModel.omni,threeway.DistanceModel,"threeway.DistanceModel")
threeway.xFlipModel = update(xFlip.omni,.~.-axis.latVsag:PP.othVego:config.neiVego-axis.latVsag:PP.othVego:config.parVego-axis.latVsag:PP.mixVego:config.neiVego-axis.latVsag:PP.mixVego:config.parVego)
modComp(xFlip.omni,threeway.xFlipModel,"threeway.xFlipModel")
```
##STEP 5:
We have an overall significant 3-way interaction, so we need to decompose holding each level of axis constant and rerun. Essentially, this is a simple effects follow-up of the 3-way
```{r}
# **Simple effects follow-up (assuming sig 3-way):**
# Important note: Only pay attention to effects in the following models that do NOT interact with the dummy codes (axis.lat and axis.sag)...
# (i.e., ignore any fixed effect that includes "axis.lat" or "axis.sag," whether it is an interaction or main effect)"
resAll.cont <- within(resAll.cont, {
axis.lat <- ifelse( axis=="lateral", 0,
ifelse( axis=="sagittal", 1, NA ) )
axis.sag <- ifelse( axis=="lateral", 1,
ifelse( axis=="sagittal", 0, NA ) )
} )
#######
##// Axis: Lateral
#######
## RT ##
lat.omnibus.RT <- lmer( log(RTDV) ~ (1 | fl) + (0 + (config.neiVego + config.parVego) | fl) +
axis.lat * (PP.othVego + PP.mixVego) * (config.neiVego + config.parVego),
data=resAll.cont, REML=FALSE )
##// test for two-way interaction of perspectivePreference and config in order to follow-up
lat.RT = update( lat.omnibus.RT, .~.-PP.othVego:config.neiVego-PP.othVego:config.parVego-PP.mixVego:config.neiVego-PP.mixVego:config.parVego)
modComp(lat.omnibus.RT,lat.RT,"lat.omnibus.RT")
## Distance ##
lat.omnibus.Distance <- lmer( log(divergDist) ~ (1 | fl) + (0 + (config.neiVego + config.parVego) | fl) +
axis.lat * (PP.othVego + PP.mixVego) * (config.neiVego + config.parVego),
data=resAll.cont, REML=FALSE )
##// test for two-way interaction of perspectivePreference and config in order to follow-up
lat.Distance = update( lat.omnibus.Distance, .~.-PP.othVego:config.neiVego-PP.othVego:config.parVego-PP.mixVego:config.neiVego-PP.mixVego:config.parVego)
modComp(lat.omnibus.Distance,lat.Distance,"lat.omnibus.Distance")
## Directional Shifts ##
lat.omnibus.xFlip <- lmer( xFlipDV ~ (1 | fl) +
axis.lat * (PP.othVego + PP.mixVego) * (config.neiVego + config.parVego),
data=resAll.cont, REML=FALSE )
##// test for two-way interaction of perspectivePreference and config in order to follow-up
lat.xFlip = update( lat.omnibus.xFlip, .~.-PP.othVego:config.neiVego-PP.othVego:config.parVego-PP.mixVego:config.neiVego-PP.mixVego:config.parVego)
modComp(lat.omnibus.xFlip,lat.xFlip,"lat.omnibus.xFlip")
#######
##// Axis: Sagittal
#######
## RT ##
sag.omnibus.RT <- lmer( log(RTDV) ~ (1 | fl) + (0 + (config.neiVego + config.parVego) | fl) +
axis.sag * (PP.othVego + PP.mixVego) * (config.neiVego + config.parVego),
data=resAll.cont, REML=FALSE )
##// test for two-way interaction of perspectivePreference and config in order to follow-up
sag.RT = update( sag.omnibus.RT, .~.-PP.othVego:config.neiVego-PP.othVego:config.parVego-PP.mixVego:config.neiVego-PP.mixVego:config.parVego)
modComp(sag.omnibus.RT,sag.RT,"sag.omnibus.RT")
## Distance ##
sag.omnibus.Distance <- lmer( log(divergDist) ~ (1 | fl) + (0 + (config.neiVego + config.parVego) | fl) +
axis.sag * (PP.othVego + PP.mixVego) * (config.neiVego + config.parVego),
data=resAll.cont, REML=FALSE )
##// test for two-way interaction of perspectivePreference and config in order to follow-up
sag.Distance = update( sag.omnibus.Distance, .~.-PP.othVego:config.neiVego-PP.othVego:config.parVego-PP.mixVego:config.neiVego-PP.mixVego:config.parVego)
modComp(sag.omnibus.Distance,sag.Distance,"sag.omnibus.Distance")
summary(lat.omnibus.Distance)
#print('Lat.Distance:'); pander(print_stats(lat.omnibus.Distance))
## Directional Shifts ##
sag.omnibus.xFlip <- lmer( xFlipDV ~ (1 | fl) +
axis.sag * (PP.othVego + PP.mixVego) * (config.neiVego + config.parVego),
data=resAll.cont, REML=FALSE )
##// test for two-way interaction of perspectivePreference and config in order to follow-up
sag.xFlip = update( sag.omnibus.xFlip, .~.-PP.othVego:config.neiVego-PP.othVego:config.parVego-PP.mixVego:config.neiVego-PP.mixVego:config.parVego)
modComp(sag.omnibus.xFlip,sag.xFlip,"sag.omnibus.xFlip")
summary(lat.omnibus.xFlip)
#print('Lat.xFlip:'); pander(print_stats(lat.omnibus.xFlip))
```
## Now let's examine the effect of trial
```{r}
resAll.cont$centered_trial =scale(resAll.cont$trial)
RTModel.time <- lmer( log(RTDV) ~ (1 | fl) +
(0 + (config.neiVego + config.parVego) | fl) + (0 + axis.latVsag | fl) + (0 + centered_trial | fl) +
centered_trial * axis.latVsag * (PP.othVego + PP.mixVego) * (config.neiVego + config.parVego),
data=resAll.cont, REML=FALSE )
summary(RTModel.time)
#print('RT:'); pander(print_stats(RTModel.time))
## Divergence from Optimal Distance ##
DistanceModel.time <- lmer( log(divergDist) ~ (1 | fl) +
(0 + (config.neiVego + config.parVego) | fl) + (0 + axis.latVsag | fl) + (0 + centered_trial | fl) +
centered_trial * axis.latVsag * (PP.othVego + PP.mixVego) * (config.neiVego + config.parVego),
data=resAll.cont, REML=FALSE )
summary(DistanceModel.time)
#print('Distance:'); pander(print_stats(DistanceModel.time))
## Directional shifts ##
xFlip.time <- lmer( xFlipDV ~ centered_trial * axis.latVsag * (PP.othVego + PP.mixVego) * (config.neiVego + config.parVego)
+ (1 | fl)
+ (0 + centered_trial | fl),
#+ (0 + (config.neiVego + config.parVego) | fl)
#+ (0 + axis.latVsag | fl),
data=resAll.cont,
#family = "poisson",
REML=FALSE )
summary(xFlip.time)
#print('Directional Shifts:'); pander(print_stats(xFlip.time))
EgoChoiceModel.time = glmer(egoChoice ~ (config.neiVego + config.parVego) * axis.latVsag * centered_trial
+ (1 | fl)
+ (0 + centered_trial | fl)
#+ (0 + (config.neiVego + config.parVego) | fl) #did not converge
+ (0 + axis.latVsag | fl),
data=resAll.cont,
family = "binomial",
method = "Laplace",
nAGQ = 1,
REML = FALSE)
summary(EgoChoiceModel.time)
```
## Follow-up analyses excluding mixed responders (reported in Appendix B)
```{r}
resAll_NoMixed = subset(resAll, resAll$perspectivePreference %in% c('ego','other'))
resAll_NoMixed <- within(resAll_NoMixed, {
# Factor 1: instruction orientation
axis.latVsag <- ifelse( axis=="lateral", 1/2,
ifelse( axis=="sagittal", -1/2, NA ) )
# Factor 2: Perspective preference
PP.othVego <- ifelse( perspectivePreference=="other", 1/2,
ifelse( perspectivePreference=="ego", -1/2, NA ))
# Factor 3: Configuation of folders
config.neiVego <- ifelse( config=="neither", 1/2,
ifelse( config=="partner", 0,
ifelse( config=="ego", -1/2, NA )))
config.parVego <- ifelse( config=="neither", 0,
ifelse( config=="partner", 1/2,
ifelse( config=="ego", -1/2, NA )))
} )
####
## STEP 2: Build the omnibus model with all effects of interest for research questions
####
## Response time ##
RTModel_NoMixed.omni <- lmer( log(RTDV) ~ (1 | fl)
+ (0 + (config.neiVego + config.parVego) | fl)
+ (0 + axis.latVsag | fl)
+ axis.latVsag * PP.othVego * (config.neiVego + config.parVego),
data=resAll_NoMixed, REML=FALSE )
summary(RTModel_NoMixed.omni)
#print('RT:'); pander(print_stats(RTModel_NoMixed.omni))
## Divergence from Optimal Distance ##
DistanceModel_NoMixed.omni <- lmer( log(divergDist) ~ (1 | fl)
+ (0 + (config.neiVego + config.parVego) | fl)
+ (0 + axis.latVsag | fl)
+ axis.latVsag * PP.othVego * (config.neiVego + config.parVego),
data=resAll_NoMixed, REML=FALSE )
summary(DistanceModel_NoMixed.omni)
#print('Distance:'); pander(print_stats(DistanceModel_NoMixed.omni))
## Directional shifts ##
xFlip_NoMixed.omni <- lmer( xFlipDV ~ axis.latVsag * PP.othVego * (config.neiVego + config.parVego)
+ (1 | fl)
+ (0 + (config.neiVego + config.parVego) | fl)
+ (0 + axis.latVsag | fl),
data=resAll_NoMixed,
#family = "poisson",
REML=FALSE )
summary(xFlip_NoMixed.omni)
#print('Directional Shifts:'); pander(print_stats(xFlip_NoMixed.omni))
## Proportion of Egocentric responses ##
EgoChoiceModel_NoMixed.omni = glmer(egoChoice ~ (config.neiVego + config.parVego) * axis.latVsag
+ (1 | fl)
#+ (0 + (config.neiVego + config.parVego) | fl) #did not converge
+ (0 + axis.latVsag | fl),
data=resAll_NoMixed,
family = "binomial",
method = "Laplace",
nAGQ = 1,
REML = FALSE)
summary(EgoChoiceModel_NoMixed.omni)
##// Effect Size
RTModel_NoMixed.omni <- lmer( log(RTDV) ~ (1 + (config.neiVego + config.parVego) + axis.latVsag | fl)
+ axis.latVsag * PP.othVego * (config.neiVego + config.parVego),
data=resAll_NoMixed, REML=FALSE )
r.squaredGLMM(RTModel_NoMixed.omni)[2] #we report this
DistanceModel_NoMixed.omni <- lmer( log(divergDist) ~ (1 + (config.neiVego + config.parVego) + axis.latVsag | fl)
+ axis.latVsag * PP.othVego * (config.neiVego + config.parVego),
data=resAll_NoMixed, REML=FALSE )
r.squaredGLMM(DistanceModel_NoMixed.omni)[2] #we report this
xFlip_NoMixed.omni <- lmer( xFlipDV ~ axis.latVsag * PP.othVego * (config.neiVego + config.parVego)
+ (1 + (config.neiVego + config.parVego) + axis.latVsag | fl),
data=resAll_NoMixed,
#family = "poisson",
REML=FALSE )
r.squaredGLMM(xFlip_NoMixed.omni)[2]
EgoChoiceModel_NoMixed.omni = glmer(egoChoice ~ (config.neiVego + config.parVego) * axis.latVsag
+ (1 + axis.latVsag| fl),
data=resAll_NoMixed,
family = "binomial",
method = "Laplace",
nAGQ = 1,
REML = FALSE)
r.squaredGLMM(EgoChoiceModel_NoMixed.omni)[2]
```
## LMERS FOR CONTROL TRIALS (reported in Appendix A)
Preliminaries
```{r}
resAllError = as.data.frame(as.matrix(resAllError))
#Defining as factors in order to set reference categories next
resAllError$config = as.factor(as.matrix(resAllError$config))
resAllError$offset = as.factor(as.matrix(resAllError$offset))
resAllError$axis = as.factor(as.matrix(resAllError$axis))
resAllError$perspectivePreference = as.factor(as.matrix(resAllError$perspectivePreference))
##Check for any "holes" in the design
with(resAllError, table(config, offset, axis))
#when offset is 0, configurations can only be both-aligned --> let's not include offset in the models as a factor
with(resAllError, table(config, axis, perspectivePreference))
#Make sure DVs are of the right type
resAllError$RTDV = as.numeric(as.matrix(resAllError$RTDV))
resAllError$divergDist = as.numeric(as.matrix(resAllError$divergDist))
resAllError$xFlipDV = as.integer(as.matrix(resAllError$xFlipDV))
str(resAllError)
```
##Step 1:
Set up contrast structure
```{r}
resAllError.cont <- within(resAllError, {
# Factor 1: instruction type
axis.latVsag <- ifelse( axis=="lateral", 1/2,
ifelse( axis=="sagittal", -1/2, NA ) )
# Factor 2: Perspective preference
PP.othVego <- ifelse( perspectivePreference=="other", 1/2,
ifelse( perspectivePreference=="mixed", 0,
ifelse( perspectivePreference=="ego", -1/2, NA )))
PP.mixVego <- ifelse( perspectivePreference=="other", 0,
ifelse( perspectivePreference=="mixed", 1/2,
ifelse( perspectivePreference=="ego", -1/2, NA )))
# Factor 3: Configuation of folders
config.neiVego <- ifelse( config=="neither", 1/2,
ifelse( config=="partner", 0,
ifelse( config=="both", 0,
ifelse( config=="ego", -1/2, NA ))))
config.parVego <- ifelse( config=="neither", 0,
ifelse( config=="partner", 1/2,
ifelse( config=="both", 0,
ifelse( config=="ego", -1/2, NA ))))
config.bothVego <- ifelse( config=="neither", 0,
ifelse( config=="partner", 0,
ifelse( config=="both", 1/2,
ifelse( config=="ego", -1/2, NA ))))
} )
```
##Step 2:
Build the omnibus models with all effects of interest for research questions
```{r}
####Error Models#####
ErrorModel.omni = glmer(err ~ (PP.othVego+PP.mixVego) * (config.neiVego+config.parVego+config.bothVego) * axis.latVsag
+ (1 | fl), #does not converge!
#+ (0 + (config.neiVego+config.parVego+config.bothVego) | fl) #does not converge
#+ (0 + axis.latVsag | fl), #does not converge
data=resAllError.cont,
family = "binomial",
REML=FALSE)
summary(ErrorModel.omni)
####RT Models#####
RTControl.omni = lmer(log(RTDV) ~ (PP.othVego+PP.mixVego) * (config.neiVego+config.parVego+config.bothVego) * axis.latVsag
+ (1 | fl)
+ (0 + (config.neiVego+config.parVego+config.bothVego) | fl)
+ (0 + axis.latVsag | fl),
data=resAllError.cont,
REML=FALSE)
#print('RT:'); pander(print_stats(RTControl.omni))
summary(RTControl.omni)
####DivergeDist models####
DistanceControl.omni = lmer(log(divergDist) ~ (PP.othVego+PP.mixVego)* (config.neiVego+config.parVego+config.bothVego) * axis.latVsag
+ (1 | fl)
#+ (0 + (config.neiVego+config.parVego+config.bothVego) | fl) #did not converge
+ (0 + axis.latVsag | fl),
data=resAllError.cont,
REML=FALSE)
#print('Divergence Distance:'); pander(print_stats(DistanceControl.omni))
summary(DistanceControl.omni)
#### Directional Shifts models ####
xFlipControl.omni = lmer(xFlipDV ~ (PP.othVego+PP.mixVego) * (config.neiVego+config.parVego+config.bothVego) * axis.latVsag
+ (1 | fl)
+ (0 + (config.neiVego+config.parVego+config.bothVego) | fl)
+ (0 + axis.latVsag | fl),
data=resAllError.cont,
#family = "poisson",
REML=FALSE)
#print('Directional Shifts:'); pander(print_stats(xFlipControl.omni))
summary(xFlipControl.omni)
```
##Step 3:
Compute effect sizes
```{r}
RTControl.omni = lmer(log(RTDV) ~ (PP.othVego+PP.mixVego) * (config.neiVego+config.parVego+config.bothVego) * axis.latVsag
+ (1 + (config.neiVego+config.parVego+config.bothVego) + axis.latVsag | fl),
data=resAllError.cont,
REML=FALSE)
r.squaredGLMM(RTControl.omni)[2]
DistanceControl.omni = lmer(log(divergDist) ~ (PP.othVego+PP.mixVego) * (config.neiVego+config.parVego+config.bothVego) * axis.latVsag
+ (1 + axis.latVsag | fl),
data=resAllError.cont,
REML=FALSE)
r.squaredGLMM(DistanceControl.omni)[2]
xFlipControl.omni = lmer(xFlipDV ~ (PP.othVego+PP.mixVego) * (config.neiVego+config.parVego+config.bothVego) * axis.latVsag
+ (1 + (config.neiVego+config.parVego+config.bothVego) + axis.latVsag | fl),
data=resAllError.cont,
#family = "poisson",
REML=FALSE)
r.squaredGLMM(DistanceControl.omni)[2]
r.squaredGLMM(ErrorModel.omni)[2]
```
## Experiment comparisons
```{r}
###Chi-square comparison of the distribution of other, ego, mixed responders here (GDD1 -> Exp 2, in paper) vs. DDK study 1
preferenceCounts <- matrix(c(129, 34, 21, 43, 31, 8), ncol=3, byrow=TRUE)
colnames(preferenceCounts) <- c("other", "ego", "mixed")
rownames(preferenceCounts) <- c("GDD1", "DDKstudy1")
preferenceCounts <- as.table(preferenceCounts)
summary(preferenceCounts)
chisq.test(preferenceCounts)
#GDD1 vs. GDD2a = DDK replication
#GDD2a: 43, 33, 17, other, ego, mixed
preferenceCounts <- matrix(c(129, 34, 21, 43, 33, 17), ncol=3, byrow=TRUE)
colnames(preferenceCounts) <- c("other", "ego", "mixed")
rownames(preferenceCounts) <- c("GDD1", "GDD2A")
preferenceCounts <- as.table(preferenceCounts)
summary(preferenceCounts)
chisq.test(preferenceCounts)
#GDD1 vs. GDD2b = other-aligned folders
#GDD2B: 59, 18, 18 : other, ego, mixed
preferenceCounts <- matrix(c(129, 34, 21, 59, 18, 18), ncol=3, byrow=TRUE)
colnames(preferenceCounts) <- c("other", "ego", "mixed")
rownames(preferenceCounts) <- c("GDD1", "GDD2b")
preferenceCounts <- as.table(preferenceCounts)
summary(preferenceCounts)
chisq.test(preferenceCounts)
View(resAllError.cont)
View(resAllError)
View(resAll)
head(resAll)
head(resAllError)
head(resAllError.cont)
